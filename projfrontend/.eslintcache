[{"D:\\mern\\projfrontend\\src\\index.js":"1","D:\\mern\\projfrontend\\src\\App.js":"2","D:\\mern\\projfrontend\\src\\Routes.js":"3","D:\\mern\\projfrontend\\src\\core\\Home.js":"4","D:\\mern\\projfrontend\\src\\backend.js":"5","D:\\mern\\projfrontend\\src\\core\\Base.js":"6","D:\\mern\\projfrontend\\src\\core\\Menu.js":"7","D:\\mern\\projfrontend\\src\\user\\Signin.js":"8","D:\\mern\\projfrontend\\src\\user\\Signup.js":"9","D:\\mern\\projfrontend\\src\\auth\\helper\\index.js":"10","D:\\mern\\projfrontend\\src\\user\\AdminDashBoard.js":"11","D:\\mern\\projfrontend\\src\\auth\\helper\\PrivateRoutes.js":"12","D:\\mern\\projfrontend\\src\\user\\UserDashBoard.js":"13","D:\\mern\\projfrontend\\src\\auth\\helper\\AdminRoutes.js":"14","D:\\mern\\projfrontend\\src\\admin\\AddCategory.js":"15","D:\\mern\\projfrontend\\src\\admin\\helper\\adminapicall.js":"16","D:\\mern\\projfrontend\\src\\admin\\ManageCategory.js":"17","D:\\mern\\projfrontend\\src\\admin\\AddProduct.js":"18","D:\\mern\\projfrontend\\src\\admin\\ManageProducts.js":"19","D:\\mern\\projfrontend\\src\\admin\\UpdateProduct.js":"20","D:\\mern\\projfrontend\\src\\core\\Card.js":"21","D:\\mern\\projfrontend\\src\\core\\helper\\ImageHelper.js":"22","D:\\mern\\projfrontend\\src\\core\\helper\\coreapicalls.js":"23","D:\\mern\\projfrontend\\src\\core\\helper\\cartHelper.js":"24","D:\\mern\\projfrontend\\src\\core\\Cart.js":"25"},{"size":310,"mtime":1612291722816,"results":"26","hashOfConfig":"27"},{"size":528,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":1929,"mtime":1614754312863,"results":"29","hashOfConfig":"27"},{"size":1856,"mtime":1614749474581,"results":"30","hashOfConfig":"27"},{"size":233,"mtime":1612324798797,"results":"31","hashOfConfig":"27"},{"size":1930,"mtime":1612979697847,"results":"32","hashOfConfig":"27"},{"size":3688,"mtime":1612932652690,"results":"33","hashOfConfig":"27"},{"size":5262,"mtime":1613497534948,"results":"34","hashOfConfig":"27"},{"size":6292,"mtime":1612786330024,"results":"35","hashOfConfig":"27"},{"size":3680,"mtime":1615044010626,"results":"36","hashOfConfig":"27"},{"size":3587,"mtime":1613416359067,"results":"37","hashOfConfig":"27"},{"size":947,"mtime":1612896506380,"results":"38","hashOfConfig":"27"},{"size":274,"mtime":1612896506379,"results":"39","hashOfConfig":"27"},{"size":669,"mtime":1612896506382,"results":"40","hashOfConfig":"27"},{"size":2781,"mtime":1613156452115,"results":"41","hashOfConfig":"27"},{"size":3186,"mtime":1615331822660,"results":"42","hashOfConfig":"27"},{"size":264,"mtime":1613126836692,"results":"43","hashOfConfig":"27"},{"size":6451,"mtime":1615054088208,"results":"44","hashOfConfig":"27"},{"size":2923,"mtime":1615332005760,"results":"45","hashOfConfig":"27"},{"size":7753,"mtime":1615133101769,"results":"46","hashOfConfig":"27"},{"size":4209,"mtime":1614796886520,"results":"47","hashOfConfig":"27"},{"size":973,"mtime":1614608986908,"results":"48","hashOfConfig":"27"},{"size":288,"mtime":1614710074254,"results":"49","hashOfConfig":"27"},{"size":2043,"mtime":1614794658077,"results":"50","hashOfConfig":"27"},{"size":2405,"mtime":1615137573470,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"146pkod",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},"D:\\mern\\projfrontend\\src\\index.js",[],["111","112"],"D:\\mern\\projfrontend\\src\\App.js",[],"D:\\mern\\projfrontend\\src\\Routes.js",[],"D:\\mern\\projfrontend\\src\\core\\Home.js",["113","114"],"import React, {useState, useEffect} from \"react\";\r\nimport \"../styles.css\";\r\n// Fetching the .env file which is defined in backend.js\r\nimport { API } from \"../backend\";\r\n// This is just the declaration of the base. You have to mention what you want to put in <Base></Base>\r\nimport  Base from \"./Base\";\r\nimport  Card  from \"./Card\";\r\nimport {getAllProducts} from \"./helper/coreapicalls\"\r\n\r\n// Whenever we want to wrap something inside a block level we use <div></div>\r\n// Whenever we want to wrap something inside a line level we use <span></span>\r\n\r\nexport default function Home() {\r\n\r\n  // Previuosly done these things in useState method\r\n  const [products, setProducts] = useState([])\r\n  const [error, setError] = useState(false)\r\n\r\n  // This is going to load all the products into the state and from the state we are going to map i.e. going to iterate\r\n  const loadAllProducts = () =>{\r\n    getAllProducts().then(data =>{\r\n      if (data.error) {\r\n        setError(data.error)\r\n      }else{\r\n        setProducts(data)\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect( () =>{\r\n    loadAllProducts()\r\n  }, [])\r\n\r\n  return (\r\n    <Base \r\n    title = \"Home\"\r\n    description= \"Welcome to cKart\">\r\n        <h1 className=\"text-white\">Say hello to your new wearings !!!</h1>\r\n\r\n      <div className=\"row text-center\">\r\n        <div className=\"row\">\r\n          {/* I have used \"tees\"  instead of product */}\r\n          {/* using the \"map\" we are just fetching the things */}\r\n          {products.map((tees, index) =>{\r\n            return (\r\n              // Key is a feature of the map\r\n              <div key = {index} className=\"col-4 mb-4\">\r\n                {/* This will fetch all the products from the backend */}\r\n                <Card product = {tees}/>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      \r\n    </Base>\r\n  );\r\n}\r\n","D:\\mern\\projfrontend\\src\\backend.js",[],"D:\\mern\\projfrontend\\src\\core\\Base.js",["115"],"import React from \"react\";\r\nimport Menu from \"./Menu\";\r\n// If there are curly braces then return is a must otherwise I can write it as below\r\n// const Base = () => (\r\n//         <div>\r\n\r\n//         </div>\r\n// )\r\n\r\n// I am creating the variables like \"title\",\"description\" etc to make the code reusable i.e. whennever I want to add any description further in this file, I don't need to write it fully. I can simply write {description}. Without these variables just a peice of HTML inside a component\r\nconst Base = ({\r\n  title = \"My Title\",\r\n  description = \"My Description\",\r\n  className = \"bg-dark text-white p-4\",\r\n  children,\r\n}) => (\r\n  <div>\r\n    <Menu />\r\n    <div className=\"container-fluid\">\r\n      {/* .container-fluid, which is width: 100% at all breakpoints */}\r\n      <div className=\"jumbotron bg-dark text-white text-center\">\r\n        {/* The use of curly braces here simply indicates the implementaion of the varible \"title\" in the component <h2></h2> */}\r\n        <h2 className=\"display-4\">{title}</h2>\r\n        {/* Make a paragraph stand out by adding .lead. */}\r\n        <p className=\"lead\">{description}</p>\r\n      </div>\r\n\r\n        {/* Here the value of the class will be fetched from the variable \"className\" and the content will come from \"children*/}\r\n        <div className={className}>{children}</div>\r\n      </div>\r\n\r\n    <footer className=\"footer bg-dark mt-auto py-3\">\r\n      <div className=\"container-fluid bg-success text-white text-center py-3\">\r\n        <h4>If you got any questions, feel free to reach out!</h4>\r\n        <button className=\"btn btn-warning btn-lg\">Contact Us</button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <span className=\"text-muted\">\r\n          An Amazing <span className=\"text-white\">MERN</span> Bootcamp\r\n        </span>\r\n      </div>\r\n    </footer>\r\n  </div>\r\n);\r\n{\r\n  /* A success(green) color will come from class bg-success */\r\n}\r\n\r\nexport default Base;\r\n","D:\\mern\\projfrontend\\src\\core\\Menu.js",[],"D:\\mern\\projfrontend\\src\\user\\Signin.js",[],"D:\\mern\\projfrontend\\src\\user\\Signup.js",[],"D:\\mern\\projfrontend\\src\\auth\\helper\\index.js",[],"D:\\mern\\projfrontend\\src\\user\\AdminDashBoard.js",[],"D:\\mern\\projfrontend\\src\\auth\\helper\\PrivateRoutes.js",[],"D:\\mern\\projfrontend\\src\\user\\UserDashBoard.js",[],"D:\\mern\\projfrontend\\src\\auth\\helper\\AdminRoutes.js",[],"D:\\mern\\projfrontend\\src\\admin\\AddCategory.js",[],"D:\\mern\\projfrontend\\src\\admin\\helper\\adminapicall.js",[],"D:\\mern\\projfrontend\\src\\admin\\ManageCategory.js",[],"D:\\mern\\projfrontend\\src\\admin\\AddProduct.js",["116","117","118","119"],"import React, { useState, useEffect } from \"react\";\r\nimport Base from \"../core/Base\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { createProduct, getAllCategories } from \"./helper/adminapicall\";\r\nimport { isAuthenticated } from \"../auth/helper/index\";\r\n\r\nconst AddProduct = () => {\r\n  const { user, token } = isAuthenticated();\r\n\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    stock: \"\",\r\n    photo: \"\",\r\n    category: \"\",\r\n    categories: [],\r\n    loading: false,\r\n    error: \"\",\r\n    // The product just being created\r\n    createdProduct: \"\",\r\n    // Redirect the user back into home page\r\n    getRedirect: false,\r\n    // The form I am using in the createProductForm is not actuallya HTML form, We need to prepare that in a regular object (formData here) which can be submitted to the backend. And these things directly comes from React Documentation\r\n    formData: \"\",\r\n  });\r\n\r\n  // Destructuring\r\n  const {\r\n    name,\r\n    description,\r\n    price,\r\n    stock,\r\n    category,\r\n    categories,\r\n    loading,\r\n    photo,\r\n    error,\r\n    createdProduct,\r\n    getRedirect,\r\n    formData,\r\n  } = values;\r\n\r\n  //   Preload the stuffs before opening the page. As this is the AddProduct page, we are setting all the values to empty\r\n\r\n  const preload = () => {\r\n    //   From admin/apicalls\r\n    getAllCategories().then((data) => {\r\n      // console.log(data);\r\n      if (data?.error) {\r\n        setValues({ ...values, error: data.error });\r\n      } else {\r\n        setValues({ ...values, categories: data, formData: new FormData() });\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    preload();\r\n  }, []);\r\n\r\n  const handleChange = (name) => (event) => {\r\n    // event.target.files[0] means I want to load the file from it's path\r\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n    // This enables directly to pass it on the backend\r\n    formData.set(name, value);\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  // The events happen after adding a product\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: \"\", loading: true });\r\n    // The information of the product comes from the formData\r\n    createProduct(user._id, token, formData).then((data) => {\r\n      if (data?.error) {\r\n        setValues({ ...values, error: data.error });\r\n      } else {\r\n        setValues({\r\n          ...values,\r\n          name: \"\",\r\n          description: \"\",\r\n          price: \"\",\r\n          stock: \"\",\r\n          photo: \"\",\r\n          // category: \"\",\r\n          // categories: [],\r\n          loading: false,\r\n          // error: \"\",\r\n          createdProduct: data.name,\r\n          getRedirect: true,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const successMessage = () => (\r\n    <div\r\n      className=\"alert alert-success mt-3\"\r\n      // If createdProduct is there, then only display otherwise no display\r\n      style={{ display: createdProduct ? \"\" : \"none\" }}\r\n    >\r\n      <h4>{createdProduct} created successfully.</h4>\r\n    </div>\r\n  );\r\n\r\n  const loadingMessage = () => (\r\n    loading && (<div\r\n      className=\"alert alert-success mt-3\"\r\n    >\r\n      <h2>Loading...</h2>\r\n    </div>)\r\n  );\r\n\r\n  const errorMessage = () => (\r\n    <div\r\n      className=\"alert alert-danger mt-3\"\r\n      style={{ display: error ? \"\" : \"none\" }}\r\n    >\r\n      <h4>{error}</h4>\r\n    </div>\r\n  );\r\n\r\n  // After the submission re direct the user to admin dashboard\r\n  const didRedirect = () =>{\r\n    if (getRedirect) {\r\n      setTimeout( () =>{\r\n       window.location.href = '/admin/dashboard'}, 2000)\r\n      \r\n  }\r\n}\r\n  const createProductForm = () => (\r\n    <form>\r\n      <span>Post photo</span>\r\n      <div className=\"form-group\">\r\n        <label className=\"btn btn-block btn-success\">\r\n          <input\r\n            onChange={handleChange(\"photo\")}\r\n            type=\"file\"\r\n            name=\"photo\"\r\n            accept=\"image\"\r\n            placeholder=\"choose a file\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"name\")}\r\n          name=\"photo\"\r\n          className=\"form-control\"\r\n          placeholder=\"Name\"\r\n          value={name}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          onChange={handleChange(\"description\")}\r\n          name=\"photo\"\r\n          className=\"form-control\"\r\n          placeholder=\"Description\"\r\n          value={description}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"price\")}\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          placeholder=\"Price\"\r\n          value={price}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <select\r\n          onChange={handleChange(\"category\")}\r\n          className=\"form-control\"\r\n          placeholder=\"Category\"\r\n        >\r\n          <option>Select</option>\r\n          {/* Alreday discussed about this in \"&&\" syntax */}\r\n          {categories &&\r\n            categories.map((cat, index) => (\r\n              // In the postman I am also using the same value\r\n              <option key={index} value={cat._id}>\r\n                {cat.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"stock\")}\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          placeholder=\"Quantity\"\r\n          value={stock}\r\n        />\r\n      </div>\r\n      <div className=\"text-center\">\r\n        <button\r\n          type=\"submit\"\r\n          onClick={onSubmit}\r\n          className=\"btn btn-outline-success mb-3\"\r\n        >\r\n          Create Product\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  return (\r\n    <Base\r\n      title=\"Add a product here\"\r\n      description=\"Welcome to product creation centre\"\r\n      className=\"container bg-info p-4\"\r\n    >\r\n      <Link to=\"/admin/dashboard\" className=\"btn btn-md btn-dark mb-3\">\r\n        Admin Home\r\n      </Link>\r\n      <div className=\"row bg-dark text-white rounded\">\r\n        <div className=\"col-md-8 offset-md-2\">\r\n          {successMessage()}\r\n          {loadingMessage()}\r\n          {errorMessage()}\r\n          {didRedirect()}\r\n          {createProductForm()}\r\n        </div>\r\n      </div>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","D:\\mern\\projfrontend\\src\\admin\\ManageProducts.js",[],"D:\\mern\\projfrontend\\src\\admin\\UpdateProduct.js",["120","121"],"import React, { useState, useEffect } from \"react\";\r\nimport Base from \"../core/Base\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getAllCategories, getProduct, updateProduct } from \"./helper/adminapicall\";\r\nimport { isAuthenticated } from \"../auth/helper/index\";\r\n\r\n// match is a property of UpdateProducts for destructring\r\nconst UpdateProducts = ({match}) => {\r\n  const { user, token } = isAuthenticated();\r\n\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    stock: \"\",\r\n    photo: \"\",\r\n    category: \"\",\r\n    categories: [],\r\n    loading: false,\r\n    error: \"\",\r\n    // The product just being created\r\n    updatedProduct: \"\",\r\n    // Redirect the user back into home page\r\n    getRedirect: false,\r\n    // The form I am using in the createProductForm is not actuallya HTML form, We need to prepare that in a regular object (formData here) which can be submitted to the backend. And these things directly comes from React Documentation\r\n    formData: \"\",\r\n  });\r\n\r\n  // Destructuring\r\n  const {\r\n    name,\r\n    description,\r\n    price,\r\n    stock,\r\n    category,\r\n    categories,\r\n    loading,\r\n    updatedProduct,\r\n    getRedirect,\r\n    formData,\r\n  } = values;\r\n\r\n  //   Preload the stuffs before opening the page. As this is the updateProduct page, we are setting all the values to the same as the product we are fetching\r\n\r\n  const preload = (productId) => {\r\n    //   From admin/apicalls. getProduct needs a productId\r\n    getProduct(productId).then(data=> {\r\n      // console.log(data);\r\n      if (data?.error) {\r\n        setValues({ ...values, error: data.error });\r\n      } else {\r\n        preloadCategories()\r\n        setValues({          \r\n            ...values, \r\n            name: data.name, \r\n            description: data.description,\r\n            price: data.price,\r\n            category: data.category._id,\r\n            stock: data.stock, \r\n            formData: new FormData(),\r\n         });\r\n      }\r\n    });\r\n  };\r\n\r\n  // async function preload(productId) {\r\n  //   const product = await fetch(`${API}/product/${productId}`);\r\n  //   const data = await product.json();\r\n  //   setValues({\r\n  //     ...values,\r\n  //     name: data.name,\r\n  //     description: data.description,\r\n  //     price: data.price,\r\n  //     stock: data.stock,\r\n  //     category: data.category._id,\r\n  //     formData: new FormData(),\r\n  //   });\r\n  \r\n  // For preloading the category in the form\r\n  const preloadCategories = () =>{\r\n      getAllCategories().then (data => {\r\n          if (data?.error) {\r\n              setValues({...values, error : data.error})\r\n          }\r\n          else{\r\n              setValues({\r\n                  categories : data, \r\n                  formData : new FormData()\r\n              })\r\n          }\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    //  For displaying the previous value\r\n    preload(match.params.productId);\r\n  }, []);\r\n\r\n  const handleChange = (name) => (event) => {\r\n    // event.target.files[0] means I want to load the file from it's path\r\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n    // This enables directly to pass it on the backend\r\n    formData.set(name, value);\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  // The events happen after adding a product\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: \"\", loading: true });\r\n    // The information of the product comes from the formData\r\n    updateProduct(match.params.productId, user._id, token, formData).then((data) => {\r\n      if (data?.error) {\r\n        setValues({ ...values, error: data.error });\r\n      } else {\r\n        setValues({\r\n          ...values,\r\n          name: \"\",\r\n          description: \"\",\r\n          price: \"\",\r\n          stock: \"\",\r\n          photo: \"\",\r\n          // category: \"\",\r\n          // categories: [],\r\n          loading: false,\r\n          // error: \"\",\r\n          updatedProduct: data.name,\r\n          getRedirect: true,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const successMessage = () => (\r\n    <div\r\n      className=\"alert alert-success mt-3\"\r\n      // If createdProduct is there, then only display otherwise no display\r\n      style={{ display: updatedProduct ? \"\" : \"none\" }}\r\n    >\r\n      <h4>{updatedProduct} updated successfully.</h4>\r\n    </div>\r\n  );\r\n\r\n  const loadingMessage = () => (\r\n    loading && (<div\r\n      className=\"alert alert-success mt-3\"\r\n    >\r\n      <h2>Loading...</h2>\r\n    </div>)\r\n  );\r\n\r\n//   const errorMessage = () => (\r\n//     <div\r\n//       className=\"alert alert-danger mt-3\"\r\n//       style={{ display: error ? \"\" : \"none\" }}\r\n//     >\r\n//       <h4>{error}</h4>\r\n//     </div>\r\n//   );\r\n\r\n  // After the submission re direct the user to admin dashboard\r\n  const didRedirect = () =>{\r\n    if (getRedirect) {\r\n      setTimeout( () =>{\r\n       window.location.href = '/admin/dashboard'}, 2000)\r\n      \r\n  }\r\n}\r\n  const createProductForm = () => (\r\n    <form>\r\n      <span>Post photo</span>\r\n      <div className=\"form-group\">\r\n        <label className=\"btn btn-block btn-success\">\r\n          <input\r\n            onChange={handleChange(\"photo\")}\r\n            type=\"file\"\r\n            name=\"photo\"\r\n            accept=\"image\"\r\n            placeholder=\"choose a file\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"name\")}\r\n          name=\"photo\"\r\n          className=\"form-control\"\r\n          placeholder=\"Name\"\r\n          value={name}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          onChange={handleChange(\"description\")}\r\n          name=\"photo\"\r\n          className=\"form-control\"\r\n          placeholder=\"Description\"\r\n          value={description}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"price\")}\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          placeholder=\"Price\"\r\n          value={price}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <select\r\n          onChange={handleChange(\"category\")}\r\n          className=\"form-control\"\r\n          placeholder=\"Category\"\r\n        >\r\n          <option>Select</option>\r\n          {/* Alreday discussed about this in \"&&\" syntax */}\r\n          {categories &&\r\n            categories.map((cat, index) => (\r\n              // In the postman I am also using the same value\r\n              <option key={index} value={cat._id}>\r\n                {cat.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={handleChange(\"stock\")}\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          placeholder=\"Quantity\"\r\n          value={stock}\r\n        />\r\n      </div>\r\n      <div className=\"text-center\">\r\n        <button\r\n          type=\"submit\"\r\n          onClick={onSubmit}\r\n          className=\"btn btn-outline-success mb-3\"\r\n        >\r\n        Update Product\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  return (\r\n    <Base\r\n      title=\"Add a product here\"\r\n      description=\"Welcome to product creation centre\"\r\n      className=\"container bg-info p-4\"\r\n    >\r\n      <Link to=\"/admin/dashboard\" className=\"btn btn-md btn-dark mb-3\">\r\n        Admin Home\r\n      </Link>\r\n      <div className=\"row bg-dark text-white rounded\">\r\n        <div className=\"col-md-8 offset-md-2\">\r\n          {successMessage()}\r\n          {loadingMessage()}\r\n          {/* {errorMessage()} */}\r\n          {didRedirect()}\r\n          {createProductForm()}\r\n        </div>\r\n      </div>\r\n    </Base>\r\n  );\r\n  };\r\n\r\nexport default UpdateProducts;\r\n","D:\\mern\\projfrontend\\src\\core\\Card.js",["122","123","124","125"],"// This is the file for creating cards in the home page\r\n\r\nimport React, {useState, useEffect} from \"react\"\r\nimport { addItemToCart, removeItemFromCart } from \"./helper/cartHelper\";\r\nimport ImageHelper from \"./helper/ImageHelper\";\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\n    const Card = ({\r\n        product,\r\n        // addToCart and removeFromCart is used for conditional rendering\r\n        addToCart = true,\r\n        removeFromCart = false,\r\n        // As we want to make setReload unfunctional we have used the below syntax which means whatever we are sending we are getting back. This is a pretty new syntax, Below is a old school stuff of it.\r\n        // function (f) {return f}\r\n        setReload = f => f,\r\n        reload = undefined\r\n        }) => {\r\n          \r\n          // had done many times. That's how the useState kicks in\r\n          const [redirect, setRedirect] = useState(false)\r\n\r\n\r\n          \r\n\r\n          //To count the no. of products. It can be seen in the console menu\r\n          const [count, setCount] = useState(product.count)\r\n\r\n          // Instead of typing again and again. Inorder to make the card reusable we have added folllowing methods so that whennver we want to reuse this we can use without any hustle\r\n            const cartTitle = product ? product.name: \"Poor network in loading the image\"\r\n            const cartDescription = product ? product.description: \"Please refresh and try again\"\r\n            const cartPrice = product ? product.price: \"Default price\"\r\n\r\n            // Makes a redirect to the cart page\r\n            const getARedirect = (redirect) =>{\r\n              if (redirect) {\r\n                return <Redirect to = \"/cart\" />\r\n              }\r\n            }\r\n\r\n            // Adds a product to the cart\r\n            const addProductToCart = () =>{\r\n              //  addItemToCart is fetched from from \"./helper/cartHelper\"\r\n              // setRedirect is set to true i.e. it is get redirected\r\n              addItemToCart(product, ()=> setRedirect(true))\r\n            }\r\n\r\n            const displayAddToCart = (addToCart) =>{\r\n                return(\r\n                    addToCart && (\r\n                        <button\r\n                        onClick={(addProductToCart) => {}}\r\n                        className=\"btn btn-block btn-outline-success mt-2 mb-2\"\r\n                      >\r\n                        Add to Cart\r\n                      </button>\r\n                    )\r\n                )\r\n            }\r\n            const displayRemoveFromCart = (removeFromCart) =>{\r\n                return(\r\n                    removeFromCart && (\r\n                  \r\n                  <button\r\n                    onClick={() => {\r\n                      removeItemFromCart(product._id)\r\n                      // Means that if reload is false setReload turns true\r\n                      setReload(!reload)\r\n                    }}\r\n                    className=\"btn btn-block btn-outline-danger mt-2 mb-2\"\r\n                  >\r\n                    Remove from cart\r\n                  </button>\r\n                    )\r\n                )\r\n            }\r\n        return (\r\n          <div className=\"card text-white bg-dark border border-info \">\r\n            <div className=\"card-header lead\">{cartTitle}</div>\r\n            <div className=\"card-body\">\r\n                {/* Calling the getARedirect and passing the \"redirect\" from the useState*/}\r\n                {getARedirect(redirect)}\r\n                {/* As we are passing product as a parameter in ImageHelper mentionig it is must */}\r\n             <ImageHelper product = {product}/>\r\n              <p className=\"lead bg-success font-weight-normal text-wrap\">\r\n                {cartDescription}\r\n              </p>\r\n              <p className=\"btn btn-success rounded  btn-sm px-4\">${cartPrice} </p>\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    {displayAddToCart(addToCart)}\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    {displayRemoveFromCart(removeFromCart)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      };\r\n      \r\nexport default Card;\r\n","D:\\mern\\projfrontend\\src\\core\\helper\\ImageHelper.js",["126"],"// This helper method is used to hit the path router.get(\"/product/photo/:productId\", photo) from the backend\r\n\r\nimport React from \"react\"\r\n// As we are fetching the routes from the backend thererfore API is called from the backend\r\nimport { API } from \"../../backend\";\r\nconst ImageHelper = ({product}) => {\r\n    // If the product exists then load the photos from the backend uding the url metioned below otherwise load the other URL\r\n    const imageUrl = product ? `${API}//product/photo/${product._Id}` : `https://images.pexels.com/photos/3561339/pexels-photo-3561339.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940`\r\n    return(\r\n        <div className=\"rounded border border-success p-2\">\r\n        <img\r\n        // Fetching the photos from the backend route\r\n          src={imageUrl}\r\n          alt=\"photo\"\r\n          style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\r\n          className=\"mb-3 rounded\"\r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ImageHelper;","D:\\mern\\projfrontend\\src\\core\\helper\\coreapicalls.js",[],"D:\\mern\\projfrontend\\src\\core\\helper\\cartHelper.js",["127"],"// File Info : This helps in adding the functionalty to the Cart.js which are adding, loading and removing the product\r\n\r\n// This will help in adding the item into the cart i.e. add functionality to the AddToCart button\r\nexport const addItemToCart = (item, next) =>{\r\n    // An array\r\n    let cart = [];\r\n    // IF the object is not undefined\r\n    if (typeof window !== undefined) {\r\n        // If there is any existing cart give me that\r\n        if (localStorage.getItem(\"cart\")) {\r\n            cart = JSON.parse(localStorage.getItem(\"cart\"))\r\n        }\r\n        // push all the items into the array \"cart\"\r\n        cart.push({\r\n            ...item,\r\n            count : 1\r\n        })\r\n        localStorage.setItem(\"cart\", JSON.stringify(cart))\r\n        next()\r\n    }\r\n}\r\n\r\n// For loading all the products in the cart\r\nexport const loadCart = () =>{\r\n    if (typeof window !== undefined) {\r\n        if (localStorage.getItem(\"cart\")) {\r\n            return JSON.parse(localStorage.getItem(\"cart\"))\r\n        }\r\n    }\r\n}\r\n\r\n// This method will help to remove the product from the cart\r\nexport const removeItemFromCart = (productId) =>{\r\n    let cart = []\r\n    if (typeof window !== undefined) {\r\n        if (localStorage.getItem(\"cart\")) {\r\n            cart = JSON.parse(localStorage.getItem(\"cart\"))\r\n        }\r\n        // We are going to loop through the cart\r\n        cart.map((product,index) =>{\r\n            // If the saved product._Id (from the backend I think ) matches with the given productId then remove it\r\n            if (product._id === productId) {\r\n                // splice is an usal JavaScript method\r\n                cart.splice(index, 1)\r\n            }\r\n        })\r\n        // After removing the item update the cart again\r\n        localStorage.setItem(\"cart\", JSON.stringify(cart))\r\n    }\r\n    return cart;\r\n}\r\n\r\n// This method will make the cart empty after the successfull payment\r\nexport const emptyCart = next =>{\r\n    if (typeof window !== undefined) {\r\n        localStorage.removeItem(\"cart\")\r\n        next();\r\n    }\r\n}","D:\\mern\\projfrontend\\src\\core\\Cart.js",["128","129"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../styles.css\";\r\n// Fetching the .env file which is defined in backend.js\r\nimport { API } from \"../backend\";\r\n// This is just the declaration of the base. You have to mention what you want to put in <Base></Base>\r\nimport Base from \"./Base\";\r\nimport { isAuthenticated } from \"../auth/helper/index\";\r\nimport Card from \"./Card\";\r\nimport { loadCart } from \"./helper/cartHelper\";\r\n\r\nconst Cart = () => {\r\n  const {\r\n    user: { name },\r\n  } = isAuthenticated();\r\n  // Previuosly done these things in useState method\r\n  const [products, setProducts] = useState([]);\r\n\r\n  // This is not going to use at anywhere. This is just to inform the react that   are making some changes. This is what happens when we are going to remount something\r\n  const [reload, setReload] = useState(false);\r\n\r\n  //   This is going to fetch all the products to this page\r\n//   This is the perfect use of the '[]'. Whenever we are going to forcefully update something for that if we need a reload then this '[]' comes into picture.\r\n  useEffect(() => {\r\n    setProducts(loadCart());\r\n  }, [reload]);\r\n\r\n  const loadAllProducts = (products) => {\r\n    if (!products) {\r\n      return <h1> No items in your cart </h1>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>This section is to load all products</h2>\r\n          {products.length > 0 &&\r\n            products.map((product, index) => (\r\n                // Beacuse the card expects 3 parameters product,removeFromCart,addToCart\r\n              <Card\r\n                key={index}\r\n                product={product}\r\n                removeFromCart={true}\r\n                addtoCart={false}\r\n                // The below two lines ensure the connection of the Cart to the Card\r\n                setReload = {setReload}\r\n                reload = {reload}\r\n              />\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const loadCheckout = () => {\r\n    return (\r\n      <div>\r\n        <h1> For moving to checkout</h1>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Base title={`${name}'s cart`} description=\"Ready to checkout\">\r\n      <h1 className=\"text-white\">Your shopping cart</h1>\r\n      <div className=\"row text-center\">\r\n        <div className=\"col-6\">{loadAllProducts()}</div>\r\n        <div className=\"col-6\">{loadCheckout()}</div>\r\n      </div>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n",{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":13},{"ruleId":"134","severity":1,"message":"138","line":17,"column":10,"nodeType":"136","messageId":"137","endLine":17,"endColumn":15},{"ruleId":"139","severity":1,"message":"140","line":45,"column":1,"nodeType":"141","messageId":"142","endLine":47,"endColumn":2},{"ruleId":"134","severity":1,"message":"143","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":18},{"ruleId":"134","severity":1,"message":"144","line":34,"column":5,"nodeType":"136","messageId":"137","endLine":34,"endColumn":13},{"ruleId":"134","severity":1,"message":"145","line":37,"column":5,"nodeType":"136","messageId":"137","endLine":37,"endColumn":10},{"ruleId":"146","severity":1,"message":"147","line":60,"column":6,"nodeType":"148","endLine":60,"endColumn":8,"suggestions":"149"},{"ruleId":"134","severity":1,"message":"144","line":35,"column":5,"nodeType":"136","messageId":"137","endLine":35,"endColumn":13},{"ruleId":"146","severity":1,"message":"150","line":97,"column":6,"nodeType":"148","endLine":97,"endColumn":8,"suggestions":"151"},{"ruleId":"134","severity":1,"message":"152","line":3,"column":26,"nodeType":"136","messageId":"137","endLine":3,"endColumn":35},{"ruleId":"134","severity":1,"message":"153","line":26,"column":18,"nodeType":"136","messageId":"137","endLine":26,"endColumn":23},{"ruleId":"134","severity":1,"message":"154","line":26,"column":25,"nodeType":"136","messageId":"137","endLine":26,"endColumn":33},{"ruleId":"134","severity":1,"message":"155","line":41,"column":19,"nodeType":"136","messageId":"137","endLine":41,"endColumn":35},{"ruleId":"156","severity":1,"message":"157","line":11,"column":9,"nodeType":"158","endLine":17,"endColumn":11},{"ruleId":"159","severity":1,"message":"160","line":40,"column":34,"nodeType":"161","messageId":"162","endLine":40,"endColumn":36},{"ruleId":"134","severity":1,"message":"135","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":13},{"ruleId":"134","severity":1,"message":"163","line":16,"column":10,"nodeType":"136","messageId":"137","endLine":16,"endColumn":18},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Redirect' is defined but never used.","'category' is assigned a value but never used.","'photo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preload'. Either include it or remove the dependency array.","ArrayExpression",["166"],"React Hook useEffect has missing dependencies: 'match.params.productId' and 'preload'. Either include them or remove the dependency array.",["167"],"'useEffect' is defined but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'addProductToCart' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'products' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [preload]",{"range":"172","text":"173"},"Update the dependencies array to be: [match.params.productId, preload]",{"range":"174","text":"175"},[1672,1674],"[preload]",[2914,2916],"[match.params.productId, preload]"]